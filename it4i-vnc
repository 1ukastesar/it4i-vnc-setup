#!/bin/bash

# Combined script for managing IT4I VNC connections.

# --- Configuration ---
source "$(dirname "$0")/.env"

LOCAL_PORT="5961"
VNC_GEOMETRY="1920x1080"
STATE_FILE="/tmp/vnc_session.info"
# --- End Configuration ---

usage() {
    echo "Usage: $0 [start|stop]"
    exit 1
}

start_vnc() {
    if [ -f "$STATE_FILE" ]; then
        echo "An active VNC session file already exists at ${STATE_FILE}."
        echo "Please run the cleanup script first if you are sure no session is active."
        exit 1
    fi

    REMOTE_HOST="$(ssh "${REMOTE_USER}@${REMOTE_HOST}" "hostname")"
    echo "--> Found fixed hostname for this session: ${REMOTE_HOST}."

    echo "--> Connecting to ${REMOTE_HOST} to find a free VNC display..."

    # Find the first available display number between 1 and 99
    DISPLAY_NUM=-1
    for i in $(seq 1 99); do
        IS_BLACKLISTED=false
        for blocked in "${DISPLAY_BLACKLIST[@]}"; do
            if [ "$i" -eq "$blocked" ]; then
                IS_BLACKLISTED=true
                break
            fi
        done

        if [ "$IS_BLACKLISTED" = true ]; then
            echo "Skipping blacklisted display :$i..."
            continue
        fi

        if ! ssh "${REMOTE_USER}@${REMOTE_HOST}" "ps aux | grep Xvnc | sed -rn 's/(\s) .*Xvnc (\:[0-9]+) .*/\1 \2/p'" | grep -q ":${i}"; then
            DISPLAY_NUM=$i
            break
        fi
    done

    if [ "$DISPLAY_NUM" -eq -1 ]; then
        echo "Could not find a free VNC display."
        exit 1
    fi

    echo "--> Found free display: :${DISPLAY_NUM}"

    echo "--> Starting VNC server on ${REMOTE_HOST}..."
    # Start the VNC server and capture the hostname of the node it's running on.
    # The `vncserver` command prints details, and `hostname` prints the node name.
    # We capture the last line of the output, which will be the hostname.
    COMPUTE_NODE=$(ssh "${REMOTE_USER}@${REMOTE_HOST}" "vncserver :${DISPLAY_NUM} -geometry ${VNC_GEOMETRY} && hostname")
    EXIT_CODE=${PIPESTATUS[0]}

    COMPUTE_NODE=$(echo "$COMPUTE_NODE" | tail -n 1)

    if [ -z "$COMPUTE_NODE" ] || [ $EXIT_CODE -ne 0 ]; then
        echo "Failed to start VNC server or get compute node hostname."
        exit 1
    fi

    echo "--> VNC server started on compute node: ${COMPUTE_NODE}"

    REMOTE_PORT=$((5900 + DISPLAY_NUM))

    echo "--> Creating SSH tunnel: localhost:${LOCAL_PORT} -> ${COMPUTE_NODE}:${REMOTE_PORT}"

    # Create the SSH tunnel in the background.
    # -f: Go into the background.
    # -N: Do not execute a remote command.
    # -L: The port forwarding specification.
    ssh -f -N -L "${LOCAL_PORT}:${COMPUTE_NODE}:${REMOTE_PORT}" "${REMOTE_USER}@${REMOTE_HOST}"

    # Find the PID of the backgrounded SSH tunnel process and save it.
    SSH_PID=$(pgrep -f "ssh -f -N -L ${LOCAL_PORT}:${COMPUTE_NODE}:${REMOTE_PORT}")

    if [ -z "$SSH_PID" ]; then
        echo "Failed to create SSH tunnel."
        # Attempt to clean up the remote server
        ssh "${REMOTE_USER}@${REMOTE_HOST}" "vncserver -kill :${DISPLAY_NUM}"
        exit 1
    fi

    # Save session info for the cleanup script
    echo "REMOTE_USER=${REMOTE_USER}" > "${STATE_FILE}"
    echo "REMOTE_HOST=${COMPUTE_NODE}" >> "${STATE_FILE}"
    echo "DISPLAY_NUM=${DISPLAY_NUM}" >> "${STATE_FILE}"
    echo "SSH_PID=${SSH_PID}" >> "${STATE_FILE}"

    echo ""
    echo "✅ VNC setup complete!"
    echo ""
    echo "   - VNC Server is running on: ${COMPUTE_NODE} (Display :${DISPLAY_NUM})"
    echo "   - SSH tunnel is active (PID: ${SSH_PID})."
    echo ""
    echo "   ➡️ Connect your VNC client to: localhost:${LOCAL_PORT}"
    echo ""
    echo "   To terminate, run the vnc_stop.sh script."
}

stop_vnc() {
    if [ ! -f "$STATE_FILE" ]; then
        echo "No active VNC session file found at ${STATE_FILE}."
        echo "Nothing to do."
        exit 0
    fi

    echo "--> Found active session file. Reading configuration..."

    # Source the file to get the variables
    source "$STATE_FILE"

    if [ -z "$REMOTE_USER" ] || [ -z "$REMOTE_HOST" ] || [ -z "$DISPLAY_NUM" ] || [ -z "$SSH_PID" ]; then
        echo "Session file is corrupted or incomplete. Manual cleanup may be required."
        exit 1
    fi

    echo "--> Terminating remote VNC server (Display :${DISPLAY_NUM}) on ${REMOTE_HOST}..."

    # Kill the VNC server on the remote cluster
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "vncserver -kill :${DISPLAY_NUM}"

    echo "--> Terminating local SSH tunnel (PID: ${SSH_PID})..."

    # Kill the local SSH tunnel process
    # Check if the process exists before trying to kill it
    if ps -p "$SSH_PID" > /dev/null; then
        kill "$SSH_PID"
        echo "   - SSH tunnel process ${SSH_PID} terminated."
    else
        echo "   - Warning: SSH tunnel process with PID ${SSH_PID} not found. It may have already been terminated."
    fi


    echo "--> Cleaning up session file..."
    rm -f "$STATE_FILE"

    echo ""
    echo "✅ VNC session terminated successfully."
}

if [ "$#" -ne 1 ]; then
    usage
fi

case "$1" in
    start)
        start_vnc
        ;;
    stop)
        stop_vnc
        ;;
    *)
        usage
        ;;
esac
